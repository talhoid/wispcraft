{"version":3,"file":"index.js","sources":["../src/snapshot.js","../src/connection.js","../src/index.js"],"sourcesContent":["export const nativeWebSocket = WebSocket;","import { client as wisp } from \"@mercuryworkshop/wisp-js/client\";\n\nexport class wispWS {\n    constructor(uri) {\n        this.binaryType = \"blob\";\n        this.readyState = \"\";\n        this.url = uri;\n        this.eventListeners = [];\n        this.handshook = false;\n        this.loggedIn = false;\n        this.compression = -1;\n        this.eag2wispQueue = [];\n        this.username = \"___\";\n        this.ipPort = uri.slice(uri.lastIndexOf(\"/\") + 1).split(\":\", 2);\n        if (this.ipPort.length < 2 || !+this.ipPort[1]) {\n            this.ipPort[1] = 25565;\n        }\n        this.ipPort[1] = +this.ipPort[1];\n        const conn = new wisp.WispConnection(\"ws://localhost:3000/\");\n        conn.addEventListener(\"open\", () => {\n            let partialPacket = [];\n            this.wispStream = conn.create_stream(this.ipPort[0], this.ipPort[1]);\n            this.wispStream.addEventListener(\"message\", async (event) => {\n                const selfPacket = [...partialPacket, ...event.data];\n                partialPacket = [];\n                const res = readVarInt(selfPacket);\n                if (res.length < 2) {\n                    partialPacket = selfPacket;\n                    return;\n                }\n                const packetLen = res[0];\n                const packetOff = res[1];\n                if (selfPacket.length < packetOff + packetLen) {\n                    partialPacket = selfPacket;\n                    return;\n                }\n                let packetIdVI, packetId, packetIdOff, packet;\n                if (this.compression >= 0) {\n                    const dataLenVI = readVarInt(selfPacket.slice(packetOff, packetOff + packetLen));\n                    if (dataLenVI.length < 2) {\n                        partialPacket = selfPacket;\n                        return;\n                    }\n                    let dataLen = dataLenVI[0];\n                    const dataLenOff = dataLenVI[1];\n                    const compressedPacket = selfPacket.slice(packetOff + dataLenOff, packetOff + packetLen);\n                    const chunks = [];\n                    if (dataLen == 0) {\n                        dataLen = packetLen - dataLenOff;\n                        chunks.push(...compressedPacket);\n                    } else {\n                        const stream = new Blob([new Uint8Array(ba2ab(compressedPacket))]).stream();\n                        try {\n                            const decompressedStream = stream.pipeThrough(\n                                new DecompressionStream(\"deflate\")\n                            );\n                            for await (const chunk of decompressedStream) {\n                                chunks.push(...chunk);\n                            }\n                        } catch (e) {\n                            partialPacket = selfPacket;\n                            return;\n                        }\n                    }\n                    if (chunks.length != dataLen) {\n                        console.info(chunks.length + \" \" + dataLen);\n                        partialPacket = selfPacket;\n                        return;\n                    }\n                    packetIdVI = readVarInt(chunks.slice(0, dataLen));\n                    if (packetIdVI.length < 2) {\n                        partialPacket = selfPacket;\n                        return;\n                    }\n                    packetId = packetIdVI[0];\n                    packetIdOff = packetIdVI[1];\n                    packet = chunks.slice(packetIdOff, dataLen);\n                    partialPacket = selfPacket.slice(packetOff + dataLenOff + compressedPacket.length);\n                } else {\n                    packetIdVI = readVarInt(selfPacket.slice(packetOff, packetOff + packetLen));\n                    if (packetIdVI.length < 2) {\n                        partialPacket = selfPacket;\n                        return;\n                    }\n                    packetId = packetIdVI[0];\n                    packetIdOff = packetIdVI[1];\n                    packet = selfPacket.slice(packetOff + packetIdOff, packetOff + packetLen);\n                    partialPacket = selfPacket.slice(packetOff + packetLen);\n                }\n                if (this.loggedIn) {\n                    if (packetId == 0x46) {\n                        this.compression = readVarInt(packet)[0];\n                    } else {\n                        this.emit(\"message\", {data: ba2ab([...makeVarInt(packetId), ...packet])});\n                    }\n                } else if (packetId == 0x03) {\n                    this.compression = readVarInt(packet)[0];\n                } else if (packetId == 0x02) {\n                    this.emit(\"message\", {data: ba2ab([PROTOCOL_SERVER_FINISH_LOGIN])});\n                    this.loggedIn = true;\n                    for (let p of this.eag2wispQueue) {\n                        const vi = readVarInt(p);\n                        if (this.compression >= 0) {\n                            p = new Uint8Array(ba2ab(await makeCompressedPacket(vi[0], p.slice(vi[1]), this.compression)));\n                        } else {\n                            p = new Uint8Array(ba2ab(makePacket(vi[0], p.slice(vi[1]))));\n                        }\n                        this.wispStream.send(p);\n                    }\n                    this.eag2wispQueue = [];\n                } else if (packetId == 0x00) {\n                    this.wispStream.close();\n                }\n            });\n            this.wispStream.addEventListener(\"close\", (event) => {\n                this.emit(\"close\", event.code);\n                conn.close();\n            });\n            this.emit(\"open\", {});\n        });\n    }\n    emit(ev, data) {\n        ev = ev.toLowerCase();\n        if (this[\"on\" + ev]) {\n            this[\"on\" + ev](data);\n        }\n        if (this.eventListeners[ev]) {\n            this.eventListeners[ev].forEach(cb => cb(data));\n        }\n    }\n    close(c) {\n        if (this.wispStream) {\n            this.wispStream.close(c);\n        }\n    }\n    async send(p) {\n        if (this.wispStream) {\n            if (!this.handshook) {\n                switch (p[0]) {\n                    case PROTOCOL_CLIENT_VERSION:\n                        this.emit(\"message\", {data: ba2ab([PROTOCOL_SERVER_VERSION, 0, 3, 0, 47, 0, 0, 0, 0, 0])});\n                        break;\n                    case PROTOCOL_CLIENT_REQUEST_LOGIN:\n                        const bytes = p.slice(2, p[1] + 2);\n                        this.username = new TextDecoder().decode(bytes);\n                        // in line below: need to replace the 16 bytes with OfflinePlayer:(username) UUID in form of 8-byte long MSB, 8-byte long LSB\n                        this.emit(\"message\", {data: ba2ab([PROTOCOL_SERVER_ALLOW_LOGIN, this.username.length, ...bytes, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])});\n                        break;\n                    case PROTOCOL_CLIENT_PROFILE_DATA:\n                        // ignore for now\n                        break;\n                    case PROTOCOL_CLIENT_FINISH_LOGIN:\n                        this.handshook = true;\n                        this.wispStream.send(new Uint8Array(ba2ab(makePacket(0x00, [...makeVarInt(47), ...makeString(this.ipPort[0]), ...makeShort(this.ipPort[1]), ...makeVarInt(2)]))));\n                        this.wispStream.send(new Uint8Array(ba2ab(makePacket(0x00, [...makeString(this.username)]))));\n                        break;\n                    default:\n                }\n                return;\n            }\n            if (this.loggedIn) {\n                const vi = readVarInt(p);\n                if (this.compression >= 0) {\n                    p = new Uint8Array(ba2ab(await makeCompressedPacket(vi[0], p.slice(vi[1]), this.compression)));\n                } else {\n                    p = new Uint8Array(ba2ab(makePacket(vi[0], p.slice(vi[1]))));\n                }\n                this.wispStream.send(p);\n            } else {\n                this.eag2wispQueue.push(p);\n            }\n        }\n    }\n    addEventListener(name, cb) {\n        name = name.toLowerCase();\n        if (this.eventListeners[name]) {\n            this.eventListeners[name].push(callback);\n        } else {\n            this.eventListeners[name] = [cb];\n        }\n    }\n    removeEventListener(name, cb) {\n        name = name.toLowerCase();\n        if (this.eventListeners[name]) {\n            if (cb && this.eventListeners[name].includes(cb)) {\n                this.eventListeners[name] = this.eventListeners[name].filter((el) => el != cb);\n                if (this.eventListeners[name].length == 0) {\n                    delete this.eventListeners[name];\n                }\n            } else if (!cb) {\n                delete this.eventListeners[name];\n            }\n            \n        }\n    }\n};","import { nativeWebSocket } from \"./snapshot\";\nimport { wispWS } from \"./connection\"\nwindow.WebSocket = class {\n    constructor(uri, protos) {\n        if ((\"\" + uri).toLowerCase().includes(\"://java://\")) {\n            this.impl = new wispWS(uri);\n        } else {\n            this.impl = new nativeWebSocket(uri, protos);\n        }\n    }\n    get binaryType() {\n        return this.impl.binaryType;\n    }\n    set binaryType(v) {\n        this.impl.binaryType = v;\n    }\n    get readyState() {\n        return this.impl.readyState;\n    }\n    get url() {\n        return this.impl.url;\n    }\n    set onopen(v) {\n        this.impl.onopen = v;\n    }\n    set onclose(v) {\n        this.impl.onclose = v;\n    }\n    set onmessage(v) {\n        this.impl.onmessage = v;\n    }\n    set onerror(v) {\n        this.impl.onerror = v;\n    }\n    close(c) {\n        return this.impl.close(c);\n    }\n    send(p) {\n        return this.impl.send(p);\n    }\n    addEventListener(p1, p2) {\n        return this.impl.addEventListener(p1, p2);\n    }\n    removeEventListener(p1, p2) {\n        return this.impl.removeEventListener(p1, p2);\n    }\n};"],"names":["nativeWebSocket","WebSocket","wispWS","constructor","uri","this","binaryType","readyState","url","eventListeners","handshook","loggedIn","compression","eag2wispQueue","username","ipPort","slice","lastIndexOf","split","length","conn","wisp","WispConnection","addEventListener","partialPacket","wispStream","create_stream","async","event","selfPacket","data","res","readVarInt","packetLen","packetOff","packetIdVI","packetId","packetIdOff","packet","dataLenVI","dataLen","dataLenOff","compressedPacket","chunks","push","stream","Blob","Uint8Array","ba2ab","decompressedStream","pipeThrough","DecompressionStream","chunk","e","console","info","emit","makeVarInt","PROTOCOL_SERVER_FINISH_LOGIN","p","vi","makeCompressedPacket","makePacket","send","close","code","ev","toLowerCase","forEach","cb","c","PROTOCOL_CLIENT_VERSION","PROTOCOL_SERVER_VERSION","PROTOCOL_CLIENT_REQUEST_LOGIN","bytes","TextDecoder","decode","PROTOCOL_SERVER_ALLOW_LOGIN","PROTOCOL_CLIENT_PROFILE_DATA","PROTOCOL_CLIENT_FINISH_LOGIN","makeString","makeShort","name","callback","removeEventListener","includes","filter","el","window","protos","impl","v","onopen","onclose","onmessage","onerror","p1","p2"],"mappings":"sSAAO,MAAMA,EAAkBC,UCExB,MAAMC,EACT,WAAAC,CAAYC,GACRC,KAAKC,WAAa,OAClBD,KAAKE,WAAa,GAClBF,KAAKG,IAAMJ,EACXC,KAAKI,eAAiB,GACtBJ,KAAKK,WAAY,EACjBL,KAAKM,UAAW,EAChBN,KAAKO,aAAe,EACpBP,KAAKQ,cAAgB,GACrBR,KAAKS,SAAW,MAChBT,KAAKU,OAASX,EAAIY,MAAMZ,EAAIa,YAAY,KAAO,GAAGC,MAAM,IAAK,IACzDb,KAAKU,OAAOI,OAAS,KAAOd,KAAKU,OAAO,MACxCV,KAAKU,OAAO,GAAK,OAErBV,KAAKU,OAAO,IAAMV,KAAKU,OAAO,GAC9B,MAAMK,EAAO,IAAIC,SAAKC,eAAe,wBACrCF,EAAKG,iBAAiB,QAAQ,KAC1B,IAAIC,EAAgB,GACpBnB,KAAKoB,WAAaL,EAAKM,cAAcrB,KAAKU,OAAO,GAAIV,KAAKU,OAAO,IACjEV,KAAKoB,WAAWF,iBAAiB,WAAWI,MAAOC,IAC/C,MAAMC,EAAa,IAAIL,KAAkBI,EAAME,MAC/CN,EAAgB,GAChB,MAAMO,EAAMC,WAAWH,GACvB,GAAIE,EAAIZ,OAAS,EAEb,YADAK,EAAgBK,GAGpB,MAAMI,EAAYF,EAAI,GAChBG,EAAYH,EAAI,GACtB,GAAIF,EAAWV,OAASe,EAAYD,EAEhC,YADAT,EAAgBK,GAGpB,IAAIM,EAAYC,EAAUC,EAAaC,EACvC,GAAIjC,KAAKO,aAAe,EAAG,CACvB,MAAM2B,EAAYP,WAAWH,EAAWb,MAAMkB,EAAWA,EAAYD,IACrE,GAAIM,EAAUpB,OAAS,EAEnB,YADAK,EAAgBK,GAGpB,IAAIW,EAAUD,EAAU,GACxB,MAAME,EAAaF,EAAU,GACvBG,EAAmBb,EAAWb,MAAMkB,EAAYO,EAAYP,EAAYD,GACxEU,EAAS,GACf,GAAe,GAAXH,EACAA,EAAUP,EAAYQ,EACtBE,EAAOC,QAAQF,OACZ,CACH,MAAMG,EAAS,IAAIC,KAAK,CAAC,IAAIC,WAAWC,MAAMN,MAAqBG,SACnE,IACI,MAAMI,EAAqBJ,EAAOK,YAC9B,IAAIC,oBAAoB,YAE5B,UAAW,MAAMC,KAASH,EACtBN,EAAOC,QAAQQ,EAEtB,CAAC,MAAOC,GAEL,YADA7B,EAAgBK,EAE5C,CACA,CACoB,GAAIc,EAAOxB,QAAUqB,EAGjB,OAFAc,QAAQC,KAAKZ,EAAOxB,OAAS,IAAMqB,QACnChB,EAAgBK,GAIpB,GADAM,EAAaH,WAAWW,EAAO3B,MAAM,EAAGwB,IACpCL,EAAWhB,OAAS,EAEpB,YADAK,EAAgBK,GAGpBO,EAAWD,EAAW,GACtBE,EAAcF,EAAW,GACzBG,EAASK,EAAO3B,MAAMqB,EAAaG,GACnChB,EAAgBK,EAAWb,MAAMkB,EAAYO,EAAaC,EAAiBvB,OAC/F,KAAuB,CAEH,GADAgB,EAAaH,WAAWH,EAAWb,MAAMkB,EAAWA,EAAYD,IAC5DE,EAAWhB,OAAS,EAEpB,YADAK,EAAgBK,GAGpBO,EAAWD,EAAW,GACtBE,EAAcF,EAAW,GACzBG,EAAST,EAAWb,MAAMkB,EAAYG,EAAaH,EAAYD,GAC/DT,EAAgBK,EAAWb,MAAMkB,EAAYD,EACjE,CACgB,GAAI5B,KAAKM,SACW,IAAZyB,EACA/B,KAAKO,YAAcoB,WAAWM,GAAQ,GAEtCjC,KAAKmD,KAAK,UAAW,CAAC1B,KAAMkB,MAAM,IAAIS,WAAWrB,MAAcE,WAEhE,GAAgB,GAAZF,EACP/B,KAAKO,YAAcoB,WAAWM,GAAQ,QACnC,GAAgB,GAAZF,EAAkB,CACzB/B,KAAKmD,KAAK,UAAW,CAAC1B,KAAMkB,MAAM,CAACU,iCACnCrD,KAAKM,UAAW,EAChB,IAAK,IAAIgD,KAAKtD,KAAKQ,cAAe,CAC9B,MAAM+C,EAAK5B,WAAW2B,GAElBA,EADAtD,KAAKO,aAAe,EAChB,IAAImC,WAAWC,YAAYa,qBAAqBD,EAAG,GAAID,EAAE3C,MAAM4C,EAAG,IAAKvD,KAAKO,eAE5E,IAAImC,WAAWC,MAAMc,WAAWF,EAAG,GAAID,EAAE3C,MAAM4C,EAAG,OAE1DvD,KAAKoB,WAAWsC,KAAKJ,EAC7C,CACoBtD,KAAKQ,cAAgB,EACzC,MAAuC,GAAZuB,GACP/B,KAAKoB,WAAWuC,OACpC,IAEY3D,KAAKoB,WAAWF,iBAAiB,SAAUK,IACvCvB,KAAKmD,KAAK,QAAS5B,EAAMqC,MACzB7C,EAAK4C,OAAO,IAEhB3D,KAAKmD,KAAK,OAAQ,GAAG,GAEjC,CACI,IAAAA,CAAKU,EAAIpC,GAEDzB,KAAK,MADT6D,EAAKA,EAAGC,iBAEJ9D,KAAK,KAAO6D,GAAIpC,GAEhBzB,KAAKI,eAAeyD,IACpB7D,KAAKI,eAAeyD,GAAIE,SAAQC,GAAMA,EAAGvC,IAErD,CACI,KAAAkC,CAAMM,GACEjE,KAAKoB,YACLpB,KAAKoB,WAAWuC,MAAMM,EAElC,CACI,UAAMP,CAAKJ,GACP,GAAItD,KAAKoB,WAAY,CACjB,IAAKpB,KAAKK,UAAW,CACjB,OAAQiD,EAAE,IACN,KAAKY,wBACDlE,KAAKmD,KAAK,UAAW,CAAC1B,KAAMkB,MAAM,CAACwB,wBAAyB,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,MACrF,MACJ,KAAKC,8BACD,MAAMC,EAAQf,EAAE3C,MAAM,EAAG2C,EAAE,GAAK,GAChCtD,KAAKS,UAAW,IAAI6D,aAAcC,OAAOF,GAEzCrE,KAAKmD,KAAK,UAAW,CAAC1B,KAAMkB,MAAM,CAAC6B,4BAA6BxE,KAAKS,SAASK,UAAWuD,EAAO,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MAC7I,MACJ,KAAKI,6BAED,MACJ,KAAKC,6BACD1E,KAAKK,WAAY,EACjBL,KAAKoB,WAAWsC,KAAK,IAAIhB,WAAWC,MAAMc,WAAW,EAAM,IAAIL,WAAW,OAAQuB,WAAW3E,KAAKU,OAAO,OAAQkE,UAAU5E,KAAKU,OAAO,OAAQ0C,WAAW,QAC1JpD,KAAKoB,WAAWsC,KAAK,IAAIhB,WAAWC,MAAMc,WAAW,EAAM,IAAIkB,WAAW3E,KAAKS,eAIvF,MAChB,CACY,GAAIT,KAAKM,SAAU,CACf,MAAMiD,EAAK5B,WAAW2B,GAElBA,EADAtD,KAAKO,aAAe,EAChB,IAAImC,WAAWC,YAAYa,qBAAqBD,EAAG,GAAID,EAAE3C,MAAM4C,EAAG,IAAKvD,KAAKO,eAE5E,IAAImC,WAAWC,MAAMc,WAAWF,EAAG,GAAID,EAAE3C,MAAM4C,EAAG,OAE1DvD,KAAKoB,WAAWsC,KAAKJ,EACrC,MACgBtD,KAAKQ,cAAc+B,KAAKe,EAExC,CACA,CACI,gBAAApC,CAAiB2D,EAAMb,GACnBa,EAAOA,EAAKf,cACR9D,KAAKI,eAAeyE,GACpB7E,KAAKI,eAAeyE,GAAMtC,KAAKuC,UAE/B9E,KAAKI,eAAeyE,GAAQ,CAACb,EAEzC,CACI,mBAAAe,CAAoBF,EAAMb,GACtBa,EAAOA,EAAKf,cACR9D,KAAKI,eAAeyE,KAChBb,GAAMhE,KAAKI,eAAeyE,GAAMG,SAAShB,IACzChE,KAAKI,eAAeyE,GAAQ7E,KAAKI,eAAeyE,GAAMI,QAAQC,GAAOA,GAAMlB,IACnC,GAApChE,KAAKI,eAAeyE,GAAM/D,eACnBd,KAAKI,eAAeyE,IAEvBb,UACDhE,KAAKI,eAAeyE,GAI3C,EChMAM,OAAOvF,UAAY,MACf,WAAAE,CAAYC,EAAKqF,IACR,GAAKrF,GAAK+D,cAAckB,SAAS,cAClChF,KAAKqF,KAAO,IAAIxF,EAAOE,GAEvBC,KAAKqF,KAAO,IAAI1F,EAAgBI,EAAKqF,EAEjD,CACI,cAAInF,GACA,OAAOD,KAAKqF,KAAKpF,UACzB,CACI,cAAIA,CAAWqF,GACXtF,KAAKqF,KAAKpF,WAAaqF,CAC/B,CACI,cAAIpF,GACA,OAAOF,KAAKqF,KAAKnF,UACzB,CACI,OAAIC,GACA,OAAOH,KAAKqF,KAAKlF,GACzB,CACI,UAAIoF,CAAOD,GACPtF,KAAKqF,KAAKE,OAASD,CAC3B,CACI,WAAIE,CAAQF,GACRtF,KAAKqF,KAAKG,QAAUF,CAC5B,CACI,aAAIG,CAAUH,GACVtF,KAAKqF,KAAKI,UAAYH,CAC9B,CACI,WAAII,CAAQJ,GACRtF,KAAKqF,KAAKK,QAAUJ,CAC5B,CACI,KAAA3B,CAAMM,GACF,OAAOjE,KAAKqF,KAAK1B,MAAMM,EAC/B,CACI,IAAAP,CAAKJ,GACD,OAAOtD,KAAKqF,KAAK3B,KAAKJ,EAC9B,CACI,gBAAApC,CAAiByE,EAAIC,GACjB,OAAO5F,KAAKqF,KAAKnE,iBAAiByE,EAAIC,EAC9C,CACI,mBAAAb,CAAoBY,EAAIC,GACpB,OAAO5F,KAAKqF,KAAKN,oBAAoBY,EAAIC,EACjD"}